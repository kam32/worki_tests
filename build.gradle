plugins {
    id 'java-library'
    id 'application'
    id 'io.qameta.allure' version '2.8.1'
}

group 'worki'
version '1.0-SNAPSHOT'

repositories {
    maven { url = "https://dl.bintray.com/qameta/maven-unstable/" }
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def allureVersion = "2.13.8",
    selenideVersion = "5.18.0",
    junitVersion = "5.7.0"

dependencies {

    testImplementation(
            "org.aspectj:aspectjweaver:1.9.6",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "ch.qos.logback:logback-classic:1.2.3",
            "org.aeonbits.owner:owner:1.0.12",
            "io.qameta.allure:allure-ee-junit-platform:3.28.2",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion",
            "org.junit.jupiter:junit-jupiter-params:$junitVersion")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

tasks.withType(Test) {
    systemProperties = System.properties
    systemProperty "junit.jupiter.extensions.autodetection.enabled", "true"
}

compileTestJava {
    options.encoding = 'UTF-8'
}

allure {
    version = "${allureVersion}"
    autoconfigure = true
    aspectjweaver = true
    useJUnit5 {
        version = "${allureVersion}"
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(Test) {
    systemProperties += System.properties
    systemProperty "junit.jupiter.extensions.autodetection.enabled", "true"

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }
}

task all(type: Test) {
    useJUnitPlatform()
}

